//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleElector.SapoElectorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Proposal", Namespace="http://schemas.datacontract.org/2004/07/WcfSapoManagerLibrary")]
    [System.SerializableAttribute()]
    public partial class Proposal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Politician", Namespace="http://schemas.datacontract.org/2004/07/WcfSapoManagerLibrary")]
    [System.SerializableAttribute()]
    public partial class Politician : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Party {
            get {
                return this.PartyField;
            }
            set {
                if ((object.ReferenceEquals(this.PartyField, value) != true)) {
                    this.PartyField = value;
                    this.RaisePropertyChanged("Party");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SapoElectorService.ISapoElectorService")]
    public interface ISapoElectorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/AddElector", ReplyAction="http://tempuri.org/ISapoElectorService/AddElectorResponse")]
        bool AddElector(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/AddElector", ReplyAction="http://tempuri.org/ISapoElectorService/AddElectorResponse")]
        System.Threading.Tasks.Task<bool> AddElectorAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/AddElectorVote", ReplyAction="http://tempuri.org/ISapoElectorService/AddElectorVoteResponse")]
        bool AddElectorVote(System.Guid idElector, System.Guid idProposal, bool vote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/AddElectorVote", ReplyAction="http://tempuri.org/ISapoElectorService/AddElectorVoteResponse")]
        System.Threading.Tasks.Task<bool> AddElectorVoteAsync(System.Guid idElector, System.Guid idProposal, bool vote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/AddElectorVoteByName", ReplyAction="http://tempuri.org/ISapoElectorService/AddElectorVoteByNameResponse")]
        bool AddElectorVoteByName(string electorName, string proposalName, bool vote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/AddElectorVoteByName", ReplyAction="http://tempuri.org/ISapoElectorService/AddElectorVoteByNameResponse")]
        System.Threading.Tasks.Task<bool> AddElectorVoteByNameAsync(string electorName, string proposalName, bool vote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/GetAllProposals", ReplyAction="http://tempuri.org/ISapoElectorService/GetAllProposalsResponse")]
        System.Collections.Generic.List<ConsoleElector.SapoElectorService.Proposal> GetAllProposals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/GetAllProposals", ReplyAction="http://tempuri.org/ISapoElectorService/GetAllProposalsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleElector.SapoElectorService.Proposal>> GetAllProposalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/GetAllPoliticians", ReplyAction="http://tempuri.org/ISapoElectorService/GetAllPoliticiansResponse")]
        System.Collections.Generic.List<ConsoleElector.SapoElectorService.Politician> GetAllPoliticians();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/GetAllPoliticians", ReplyAction="http://tempuri.org/ISapoElectorService/GetAllPoliticiansResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleElector.SapoElectorService.Politician>> GetAllPoliticiansAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/GetElectorsNumber", ReplyAction="http://tempuri.org/ISapoElectorService/GetElectorsNumberResponse")]
        int GetElectorsNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/GetElectorsNumber", ReplyAction="http://tempuri.org/ISapoElectorService/GetElectorsNumberResponse")]
        System.Threading.Tasks.Task<int> GetElectorsNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/PersistData", ReplyAction="http://tempuri.org/ISapoElectorService/PersistDataResponse")]
        bool PersistData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISapoElectorService/PersistData", ReplyAction="http://tempuri.org/ISapoElectorService/PersistDataResponse")]
        System.Threading.Tasks.Task<bool> PersistDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISapoElectorServiceChannel : ConsoleElector.SapoElectorService.ISapoElectorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SapoElectorServiceClient : System.ServiceModel.ClientBase<ConsoleElector.SapoElectorService.ISapoElectorService>, ConsoleElector.SapoElectorService.ISapoElectorService {
        
        public SapoElectorServiceClient() {
        }
        
        public SapoElectorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SapoElectorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SapoElectorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SapoElectorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddElector(string name) {
            return base.Channel.AddElector(name);
        }
        
        public System.Threading.Tasks.Task<bool> AddElectorAsync(string name) {
            return base.Channel.AddElectorAsync(name);
        }
        
        public bool AddElectorVote(System.Guid idElector, System.Guid idProposal, bool vote) {
            return base.Channel.AddElectorVote(idElector, idProposal, vote);
        }
        
        public System.Threading.Tasks.Task<bool> AddElectorVoteAsync(System.Guid idElector, System.Guid idProposal, bool vote) {
            return base.Channel.AddElectorVoteAsync(idElector, idProposal, vote);
        }
        
        public bool AddElectorVoteByName(string electorName, string proposalName, bool vote) {
            return base.Channel.AddElectorVoteByName(electorName, proposalName, vote);
        }
        
        public System.Threading.Tasks.Task<bool> AddElectorVoteByNameAsync(string electorName, string proposalName, bool vote) {
            return base.Channel.AddElectorVoteByNameAsync(electorName, proposalName, vote);
        }
        
        public System.Collections.Generic.List<ConsoleElector.SapoElectorService.Proposal> GetAllProposals() {
            return base.Channel.GetAllProposals();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleElector.SapoElectorService.Proposal>> GetAllProposalsAsync() {
            return base.Channel.GetAllProposalsAsync();
        }
        
        public System.Collections.Generic.List<ConsoleElector.SapoElectorService.Politician> GetAllPoliticians() {
            return base.Channel.GetAllPoliticians();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleElector.SapoElectorService.Politician>> GetAllPoliticiansAsync() {
            return base.Channel.GetAllPoliticiansAsync();
        }
        
        public int GetElectorsNumber() {
            return base.Channel.GetElectorsNumber();
        }
        
        public System.Threading.Tasks.Task<int> GetElectorsNumberAsync() {
            return base.Channel.GetElectorsNumberAsync();
        }
        
        public bool PersistData() {
            return base.Channel.PersistData();
        }
        
        public System.Threading.Tasks.Task<bool> PersistDataAsync() {
            return base.Channel.PersistDataAsync();
        }
    }
}
